<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Phases.UmbracoUtils</name>
    </assembly>
    <members>
        <member name="M:Phases.UmbracoUtils.Common.GetAllCountries">
            <summary>
            Get all countries list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Phases.UmbracoUtils.Enumeration.GetEnumValues``2">
            <summary>
            
            </summary>
            <typeparam name="TEnum"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Phases.UmbracoUtils.Enumeration.ToNullableEnum``1(System.Nullable{System.Int32})">
            <summary>
            Convert Nullable Integer to corresponding enum value
            </summary>
            <typeparam name="TEnum"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Phases.UmbracoUtils.Cryptography.Encrypt(System.String,System.String)">
            <summary>
            Encrypt string
            </summary>
            <param name="plainText">Plain Text</param>
            <param name="passPhrase"></param>
            <returns></returns>
        </member>
        <member name="M:Phases.UmbracoUtils.Cryptography.Decrypt(System.String,System.String)">
            <summary>
            Decrypt string
            </summary>
            <param name="cipherText">Cipher Text</param>
            <param name="passPhrase"></param>
            <returns></returns>
        </member>
        <member name="M:Phases.UmbracoUtils.Dates.ToDate(System.String)">
            <summary>
            Parse string to date
            </summary>
            <param name="dateString"></param>
            <returns>Parsed date OR, null if input string is not in correct format</returns>
        </member>
        <member name="M:Phases.UmbracoUtils.Dates.GetDayNumber(System.DateTime)">
            <summary>
             Gets the Day number and ordinal suffix for a given date
            </summary>
            <param name="date">The date</param>
            <returns>The day number and ordinal suffix</returns>
        </member>
        <member name="M:Phases.UmbracoUtils.Dates.GetMonthName(System.DateTime)">
            <summary>
            Gets the month string of the given DateTime
            </summary>
            <param name="date">The DateTime object</param>
            <returns>The string representation of month</returns>
            <example>Returns "January" for the date 1.1.2013</example>
        </member>
        <member name="M:Phases.UmbracoUtils.Dates.GetDayName(System.DateTime)">
            <summary>
            Gets the day string of the given DateTime.
            </summary>
            <param name="date">The DateTime object</param>
            <returns>The string representation of day</returns>
            <example>Returns "Sunday" for the date 1.1.2013</example>
        </member>
        <member name="M:Phases.UmbracoUtils.Dates.PrettyDate(System.DateTime)">
            <summary>
            Gets the pretty date.
            </summary>
            <param name="date">The date.</param>
            <returns>Returns a pretty date.</returns>
            <remarks>
            http://dotnetperls.com/pretty-date
            </remarks>
        </member>
        <member name="M:Phases.UmbracoUtils.Media.GetAllImages(System.String)">
            <summary>
            Get all images from a mutlipleMediaPickerResult, if folder, it takes the Descendant images
            </summary>
            <param name="mutlipleMediaPickerResult"></param>
            <returns></returns>
        </member>
        <member name="M:Phases.UmbracoUtils.Member.GetCurrentMemberId">
            <summary>
            Get current logged in umbraco user
            </summary>
            <returns></returns>
        </member>
        <member name="M:Phases.UmbracoUtils.Member.GetUniqueId(System.Int32)">
            <summary>
            Get umbraco memeber node's unique id
            </summary>
            <param name="memberId"></param>
            <returns></returns>
        </member>
        <member name="P:Phases.UmbracoUtils.MailAttachment.Data">
            <summary>
            Gets the data stream for this attachment
            </summary>
        </member>
        <member name="P:Phases.UmbracoUtils.MailAttachment.Filename">
            <summary>
            Gets the original filename for this attachment
            </summary>
        </member>
        <member name="P:Phases.UmbracoUtils.MailAttachment.MediaType">
            <summary>
            Gets the attachment type: Bytes or String
            </summary>
        </member>
        <member name="P:Phases.UmbracoUtils.MailAttachment.File">
            <summary>
            Gets the file for this attachment (as a new attachment)
            </summary>
        </member>
        <member name="M:Phases.UmbracoUtils.MailAttachment.#ctor(System.Byte[],System.String)">
            <summary>
            Construct a mail attachment form a byte array
            </summary>
            <param name="data">Bytes to attach as a file</param>
            <param name="filename">Logical filename for attachment</param>
        </member>
        <member name="M:Phases.UmbracoUtils.MailAttachment.#ctor(System.String,System.String)">
            <summary>
            Construct a mail attachment from a string
            </summary>
            <param name="data">String to attach as a file</param>
            <param name="filename">Logical filename for attachment</param>
        </member>
        <member name="M:Phases.UmbracoUtils.Numeric.ToInt(System.String)">
            <summary>
            Safely parse any string to integer. Return null if not an integer
            </summary>
            <param name="number"></param>
            <returns>Integer Value</returns>
        </member>
        <member name="M:Phases.UmbracoUtils.Numeric.ToDecimalOrDefault(System.String)">
            <summary>
            Safely parse any string to decimal. Return default value if not a decimal
            </summary>
            <param name="number"></param>
            <returns>Integer Value</returns>
        </member>
        <member name="M:Phases.UmbracoUtils.Numeric.ToIntOrDefault(System.String)">
            <summary>
            Safely parse any string to integer. Return default of int, if not an integer
            </summary>
            <param name="number"></param>
            <returns>Integer Value</returns>
        </member>
        <member name="P:Phases.UmbracoUtils.Pagination.TotalItems">
            <summary>
                Gets or sets the total number of rows in the datasource
            </summary>
        </member>
        <member name="P:Phases.UmbracoUtils.Pagination.PageSize">
            <summary>
                The number of items per page. Default: 10
            </summary>
        </member>
        <member name="P:Phases.UmbracoUtils.Pagination.CurrentPageIndex">
            <summary>
                The page that is selected when the pagination is initialized. Default: 0
            </summary>
        </member>
        <member name="P:Phases.UmbracoUtils.Pagination.DisplayEntriesCount">
            <summary>
                Maximum number of pagination links that are visible. Set this to 0 to display a simple "Previous/Next"-Navigation.
                Default: 9
            </summary>
        </member>
        <member name="P:Phases.UmbracoUtils.Pagination.EdgeEntriesCount">
            <summary>
                If this number is set to 1, links to the first and the last page are always shown
                , independent of the current position and the visibility constraints set by num_display_entries
                . You can set it to bigger numbers to show more links. Default is 2
            </summary>
        </member>
        <member name="P:Phases.UmbracoUtils.Pagination.TargetLink">
            <summary>
                Link target of the pagination links. Default: ?p=
            </summary>
        </member>
        <member name="P:Phases.UmbracoUtils.Pagination.PreviousPageText">
            <summary>
                Text for the "Previous"-link that decreases the current page number by 1. Leave blank to hide the link. Default:
                Dictionary entry [Pagination]Previous
            </summary>
        </member>
        <member name="P:Phases.UmbracoUtils.Pagination.NextPageText">
            <summary>
                Text for the "Next"-link that increases the current page number by 1. Leave blank to hide the link. Default:
                Dictionary entry [Pagination]Next
            </summary>
        </member>
        <member name="P:Phases.UmbracoUtils.Pagination.EllipseText">
            <summary>
                When there is a gap between the numbers created by EdgeEntriesCount and the displayed number interval, this text
                will be inserted into the gap (inside a span tag).
            </summary>
        </member>
        <member name="M:Phases.UmbracoUtils.Pagination.CreatePagination(System.Int32,System.Int32,System.String)">
            <summary>
                Create the pagination as per the TotalItems available and the PageSize
            </summary>
        </member>
        <member name="M:Phases.UmbracoUtils.Pagination.CreatePagination(System.Int32,System.Int32,System.String,System.String)">
            <summary>
                Create the pagination as per the TotalItems available and the PageSize
            </summary>
        </member>
        <member name="M:Phases.UmbracoUtils.Pagination.CreatePagination(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
                Create the pagination as per the TotalItems available and the PageSize
            </summary>
            <param name="totalItems">todo: describe totalItems parameter on CreatePagination</param>
            <param name="pageSize">todo: describe pageSize parameter on CreatePagination</param>
            <param name="currentPageIndex">todo: describe currentPageIndex parameter on CreatePagination</param>
            <param name="targetLink">todo: describe targetLink parameter on CreatePagination</param>
        </member>
        <member name="M:Phases.UmbracoUtils.Pagination.CreatePagination(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>
                Create the pagination as per the TotalItems available and the PageSize
            </summary>
        </member>
        <member name="M:Phases.UmbracoUtils.Pagination.TotalPages">
            <summary>
                Function to calculate the total number of pages depending on TotalItems and PageSize
            </summary>
        </member>
        <member name="M:Phases.UmbracoUtils.Social.GravatarImageURL(System.String,System.String,System.Int32)">
            <summary>
            Get gravatar image URL
            </summary>
            <param name="emailAddress"></param>
            <param name="defaultImageURL"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Phases.UmbracoUtils.Social.GetMd5Hash(System.String)">
            <summary>
            Generates an MD5 hash of the given string
            </summary>
            <param name="input"></param>
            <remarks>Source: http://msdn.microsoft.com/en-us/library/system.security.cryptography.md5.aspx </remarks>
        </member>
        <member name="M:Phases.UmbracoUtils.Social.GetEmbedUrl(System.String)">
            <summary>
            Get embed URL for youtube or vimeo video
            </summary>
            <param name="videoUrl">youtube or vimeo video URL</param>
            <returns></returns>
        </member>
        <member name="M:Phases.UmbracoUtils.Strings.IsNullOrEmptyAfterTrimmed(System.String)">
            <summary>
            Check if null or empty after trimmed
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Phases.UmbracoUtils.Strings.WordCount(System.String)">
            <summary>
            Counts number of words in a string
            </summary>
            <param name="str">The string to parse</param>
            <returns>An integer of the number of words found</returns>
        </member>
        <member name="M:Phases.UmbracoUtils.Strings.SubstringBefore(System.String,System.String)">
            <summary>
            Returns the substring of string1 before the occurrence of string2.
            </summary>
            <param name="string1">
            The string 1.
            </param>
            <param name="string2">
            The string 2.
            </param>
            <returns>
            The substring
            </returns>
        </member>
        <member name="M:Phases.UmbracoUtils.Strings.SubstringAfter(System.String,System.String)">
            <summary>
            Returns the substring of string1 after the occurrence of string2.
            </summary>
            <param name="string1">
            The string 1.
            </param>
            <param name="string2">
            The string 2.
            </param>
            <returns>
            The substring
            </returns>
        </member>
        <member name="M:Phases.UmbracoUtils.Strings.StripTags(System.String)">
            <summary>
            Remove HTML tags from string using char array.
            </summary>
            <param name="source">HTML string</param>
            <returns></returns>
        </member>
        <member name="M:Phases.UmbracoUtils.Strings.TruncateAtWord(System.String,System.Int32,System.String)">
            <summary>
            Truncate Word
            </summary>
            <param name="value"></param>
            <param name="length"></param>
            <param name="trailingString">todo: describe trailingString parameter on TruncateAtWord</param>
            <returns></returns>
        </member>
        <member name="M:Phases.UmbracoUtils.Strings.SanitizeFilename(System.String)">
            <summary>
            Replace invalid fileName Charactes with _
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:Phases.UmbracoUtils.Url.IsYoutubeUrl(System.String)">
            <summary>
            Check if url is youtube url.
            </summary>
            <param name="url"></param>
            <returns>true if the url parameter is youtube video url; otherwise, false.</returns>
        </member>
        <member name="M:Phases.UmbracoUtils.Url.IsVimeoUrl(System.String)">
            <summary>
            Check if url is vimeo url.
            </summary>
            <param name="url"></param>
            <returns>true if the url parameter is vimeo video url; otherwise, false.</returns>
        </member>
        <member name="M:Phases.UmbracoUtils.Vimeo.VimeoExtensionMethods.VimeoEmbed(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates the HTML iframe for embedding a Vimeo video based on the specified ID.
            </summary>
            <param name="vimeoId">The ID of the video.</param>
            <param name="width">The width of the iframe.</param>
            <param name="height">The height of the iframe.</param>
        </member>
        <member name="M:Phases.UmbracoUtils.Vimeo.VimeoExtensionMethods.VimeoEmbed(System.String,System.Int32,System.Int32)">
            <summary>
            Generates the HTML iframe for embedding a Vimeo video based on the specified ID.
            </summary>
            <param name="vimeoId">The ID of the video.</param>
            <param name="width">The width of the iframe.</param>
            <param name="height">The height of the iframe.</param>
        </member>
        <member name="M:Phases.UmbracoUtils.Vimeo.VimeoExtensionMethods.GetVimeoDuration(System.Int32)">
            <summary>
            Gets the duration of the Vimeo video with the specified ID.
            </summary>
            <param name="vimeoId">The ID of the video.</param>
            <returns>Returns the duration in seconds if the video is found, otherwise <var>-1</var> will be returned.</returns>
        </member>
        <member name="M:Phases.UmbracoUtils.Vimeo.VimeoExtensionMethods.GetVimeoDuration(System.String)">
            <summary>
            Gets the duration of the Vimeo video with the specified ID.
            </summary>
            <param name="vimeoId">The ID of the video.</param>
            <returns>Returns the duration in seconds if the video is found, otherwise <var>-1</var> will be returned.</returns>
        </member>
        <member name="M:Phases.UmbracoUtils.Vimeo.VimeoExtensionMethods.GetVimeoThumbnail(System.Int32)">
            <summary>
            Gets the URL for a thumbnail measuring 640x360 pixels.
            </summary>
            <param name="vimeoId">The ID of the video.</param>
        </member>
        <member name="M:Phases.UmbracoUtils.Vimeo.VimeoExtensionMethods.GetVimeoThumbnail(System.String)">
            <summary>
            Gets the URL for a thumbnail measuring 640x360 pixels.
            </summary>
            <param name="vimeoId">The ID of the video.</param>
        </member>
        <member name="M:Phases.UmbracoUtils.Vimeo.VimeoExtensionMethods.GetVimeoThumbnail(System.Int32,Phases.UmbracoUtils.Vimeo.VimeoThumbnail)">
            <summary>
            Gets the URL for a thumbnail with the specified size.
            </summary>
            <param name="vimeoId">The ID of the video.</param>
            <param name="size">The size of the desired thumbnail.</param>
        </member>
        <member name="M:Phases.UmbracoUtils.Vimeo.VimeoExtensionMethods.GetVimeoThumbnail(System.String,Phases.UmbracoUtils.Vimeo.VimeoThumbnail)">
            <summary>
            Gets the URL for a thumbnail with the specified size.
            </summary>
            <param name="vimeoId">The ID of the video.</param>
            <param name="size">The size of the desired thumbnail.</param>
        </member>
        <member name="M:Phases.UmbracoUtils.Vimeo.VimeoExtensionMethods.GetVimeoId(System.String)">
            <summary>
            Extract Vimeo video id from the video url
            </summary>
            <param name="vimeoVideoUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Phases.UmbracoUtils.Vimeo.VimeoHelpers.GetVideoById(System.Int32)">
            <summary>
            Gets information about a video with the specified ID. Any exceptions that might
            occur during the calls to the API will be catched, and the method will instead
            return <var>NULL</var>.
            </summary>
            <param name="vimeoId">The ID of the video.</param>
        </member>
        <member name="M:Phases.UmbracoUtils.Vimeo.VimeoHelpers.GetVideoById(System.String)">
            <summary>
            Gets information about a video with the specified ID. Any exceptions that might
            occur during the calls to the API will be catched, and the method will instead
            return <var>NULL</var>.
            </summary>
            <param name="vimeoId">The ID of the video.</param>
        </member>
        <member name="M:Phases.UmbracoUtils.Vimeo.VimeoHelpers.GetCachedVideoById(System.Int32)">
            <summary>
            Gets information about a video with the specified ID. Any exceptions that might
            occur during the calls to the API will be catched, and the method will instead
            return <var>NULL</var>. If the video is found, it is cached for the current
            request so calling the method multiple times will only result in a single
            request to the Vimeo API.
            </summary>
            <param name="vimeoId">The ID of the video.</param>
        </member>
        <member name="M:Phases.UmbracoUtils.Vimeo.VimeoHelpers.GetCachedVideoById(System.String)">
            <summary>
            Gets information about a video with the specified ID. Any exceptions that might
            occur during the calls to the API will be catched, and the method will instead
            return <var>NULL</var>. If the video is found, it is cached for the current
            request so calling the method multiple times will only result in a single
            request to the Vimeo API.
            </summary>
            <param name="vimeoId">The ID of the video.</param>
        </member>
        <member name="M:Phases.UmbracoUtils.Vimeo.VimeoHelpers.GetEmbedHtml(System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates the HTML iframe for embedding a Vimeo video based on the specified ID.
            </summary>
            <param name="vimeoId">The ID of the video.</param>
            <param name="width">The width of the iframe.</param>
            <param name="height">The height of the iframe.</param>
        </member>
        <member name="M:Phases.UmbracoUtils.Vimeo.VimeoHelpers.GetEmbedHtml(System.String,System.Int32,System.Int32)">
            <summary>
            Generates the HTML iframe for embedding a Vimeo video based on the specified ID.
            </summary>
            <param name="vimeoId">The ID of the video.</param>
            <param name="width">The width of the iframe.</param>
            <param name="height">The height of the iframe.</param>
        </member>
        <member name="M:Phases.UmbracoUtils.Vimeo.VimeoHelpers.GetVimeoId(System.String)">
            <summary>
            Extract Vimeo video id from the video url
            </summary>
            <param name="vimeoVideoUrl"></param>
            <returns></returns>
        </member>
        <member name="F:Phases.UmbracoUtils.Vimeo.VimeoThumbnail.Large">
            <summary>
            A thumbnail measuring 640x360 pixels.
            </summary>
        </member>
        <member name="F:Phases.UmbracoUtils.Vimeo.VimeoThumbnail.Medium">
            <summary>
            A thumbnail measuring 200x150 pixels.
            </summary>
        </member>
        <member name="F:Phases.UmbracoUtils.Vimeo.VimeoThumbnail.Small">
            <summary>
            A thumbnail measuring 100x75 pixels.
            </summary>
        </member>
        <member name="P:Phases.UmbracoUtils.Vimeo.VimeoVideo.BaseElement">
            <summary>
            The XML received from the Vimeo API.
            </summary>
        </member>
        <member name="P:Phases.UmbracoUtils.Vimeo.VimeoVideo.Id">
            <summary>
            The ID of the video.
            </summary>
        </member>
        <member name="P:Phases.UmbracoUtils.Vimeo.VimeoVideo.Title">
            <summary>
            The title of the video.
            </summary>
        </member>
        <member name="P:Phases.UmbracoUtils.Vimeo.VimeoVideo.Description">
            <summary>
            The video description. May contain traces of HTML.
            </summary>
        </member>
        <member name="M:Phases.UmbracoUtils.Vimeo.VimeoVideo.GetVideoById(System.Int32)">
            <summary>
            Gets information about a video with the specified ID.
            </summary>
            <param name="vimeoId">The ID of the video.</param>
        </member>
        <member name="M:Phases.UmbracoUtils.Vimeo.VimeoVideo.GetVideoById(System.String)">
            <summary>
            Gets information about a video with the specified ID.
            </summary>
            <param name="vimeoId">The ID of the video.</param>
        </member>
        <member name="M:Phases.UmbracoUtils.YouTube.YouTubeExtensionMethods.GetChannel(System.String)">
            <summary>
            Assuming the value of the string is a valid channel name, this method will get the videos of the specified
            channel. Theresponse uses pagination, so you might need to make multiple calls to get all videos of a
            channel.
            </summary>
            <param name="channelName">The name of the channel (use the authors name for their default channel).</param>
        </member>
        <member name="M:Phases.UmbracoUtils.YouTube.YouTubeExtensionMethods.GetChannel(System.String,System.Int32)">
            <summary>
            Assuming the value of the string is a valid channel name, this method will get the videos of the specified
            channel. Theresponse uses pagination, so you might need to make multiple calls to get all videos of a
            channel.
            </summary>
            <param name="channelName">The name of the channel (use the authors name for their default channel).</param>
            <param name="offset">The offset (must be 1 or higher - default is 1).</param>
        </member>
        <member name="M:Phases.UmbracoUtils.YouTube.YouTubeExtensionMethods.GetChannel(System.String,System.Int32,System.Int32)">
            <summary>
            Assuming the value of the string is a valid channel name, this method will get the videos of the specified
            channel. Theresponse uses pagination, so you might need to make multiple calls to get all videos of a
            channel.
            </summary>
            <param name="channelName">The name of the channel (use the authors name for their default channel).</param>
            <param name="offset">The offset (must be 1 or higher - default is 1).</param>
            <param name="maxResults">The maximum of videos per page (cannot be greater than 50).</param>
        </member>
        <member name="M:Phases.UmbracoUtils.YouTube.YouTubeExtensionMethods.GetYouTubeVideo(System.String)">
            <summary>
            Attempts to find a YouTube video ID the specified string and get
            information about that video.
            </summary>
            <param name="subject">The string to search.</param>
        </member>
        <member name="M:Phases.UmbracoUtils.YouTube.YouTubeExtensionMethods.GetYouTubeId(System.String)">
            <summary>
            Uses regular expressions for finding a YouTube video ID in the string.
            </summary>
            <param name="subject">The string to search.</param>
            <returns>The YouTube video ID if found, otherwise <var>NULL</var>.</returns>
        </member>
        <member name="M:Phases.UmbracoUtils.YouTube.YouTubeExtensionMethods.GetYouTubeId(System.String,System.String@)">
            <summary>
            Uses regular expressions for finding a YouTube video ID in the string.
            </summary>
            <param name="subject">The string to search.</param>
            <param name="videoId">The YouTube video ID if found, otherwise <var>NULL</var>.</param>
            <returns>Returns <var>TRUE</var> if a video ID is found, otherwise <var>FALSE</var>.</returns>
        </member>
        <member name="M:Phases.UmbracoUtils.YouTube.YouTubeExtensionMethods.YouTubeEmbed(System.String,System.Int32,System.Int32)">
            <summary>
            Builds the HTML embed iframe for the specified video.
            </summary>
            <param name="videoId">The YouTube ID of the video.</param>
            <param name="width">The desired width of the iframe.</param>
            <param name="height">The desired height of the iframe.</param>
        </member>
        <member name="M:Phases.UmbracoUtils.YouTube.YouTubeExtensionMethods.YouTubeEmbed(System.String,System.String,System.String)">
            <summary>
            Builds the HTML embed iframe for the specified video.
            </summary>
            <param name="videoId">The YouTube ID of the video.</param>
            <param name="width">The desired width of the iframe.</param>
            <param name="height">The desired height of the iframe.</param>
        </member>
        <member name="M:Phases.UmbracoUtils.YouTube.YouTubeExtensionMethods.YouTubeEmbed(System.String,System.Int32,System.Int32,Phases.UmbracoUtils.YouTube.YoutubeVideoQuality)">
            <summary>
            Builds the HTML embed iframe for the specified video.
            </summary>
            <param name="videoId">The YouTube ID of the video.</param>
            <param name="width">The desired width of the iframe.</param>
            <param name="height">The desired height of the iframe.</param>
            <param name="videoQuality">Quality of the video</param>
            <returns></returns>
        </member>
        <member name="M:Phases.UmbracoUtils.YouTube.YouTubeExtensionMethods.YouTubeEmbed(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Builds the HTML embed iframe for the specified video.
            </summary>
            <param name="videoId">The YouTube ID of the video.</param>
            <param name="width">The desired width of the iframe.</param>
            <param name="height">The desired height of the iframe.</param>
            <param name="showRelations">By the default, YouTube will show
            related videos at the end of videos. Setting this to
            <var>FALSE</var> will disable the feature.</param>
            <param name="wmode">The flash video player doesn't really
            play well with layers (mostly in IE). Setting this
            parameter to <var>transarent</var> will solve most
            of these issues.</param>
        </member>
        <member name="M:Phases.UmbracoUtils.YouTube.YouTubeExtensionMethods.GetYouTubeThumbnail(System.String)">
            <summary>
            Gets the default thumbnail URL for a video with the specified ID. The default
            thumbnail measures 480x360 pixels.
            </summary>
            <param name="videoId">The ID of the video.</param>
            <returns>The thumbnail URL if the video ID is valid, otherwise <var>NULL</var>.</returns>
        </member>
        <member name="M:Phases.UmbracoUtils.YouTube.YouTubeExtensionMethods.GetYouTubeThumbnail(System.String,System.Int32)">
            <summary>
            Gets the thumbnail URL for a video with the specified ID. The default thumbnail (index = 0)
            measures 480x360 pixels, while the others measures 120x90 pixels.
            </summary>
            <param name="videoId">The ID of the video.</param>
            <param name="index">The index of the thumbnail URL to return
            (valid range is from 0 to 3 - both inclusive).</param>
            <returns>The thumbnail URL if the video ID is valid, otherwise <var>NULL</var>.</returns>
        </member>
        <member name="M:Phases.UmbracoUtils.YouTube.YouTubeHelpers.GetChannel(System.String)">
            <summary>
            Gets the videos of the specified channel.
            </summary>
            <param name="channelName">The name of the channel (use the authors name for their default channel).</param>
        </member>
        <member name="M:Phases.UmbracoUtils.YouTube.YouTubeHelpers.GetChannel(System.String,System.Int32)">
            <summary>
            Gets the videos of the specified channel.
            </summary>
            <param name="offset">The offset (must be 1 or higher - default is 1).</param>
            <param name="channelName">The name of the channel (use the authors name for their default channel).</param>
        </member>
        <member name="M:Phases.UmbracoUtils.YouTube.YouTubeHelpers.GetChannel(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the videos of the specified channel.
            </summary>
            <param name="channelName">The name of the channel (use the authors name for their default channel).</param>
            <param name="offset">The offset (must be 1 or higher - default is 1).</param>
            <param name="maxResults">The maximum of videos per page (cannot be greater than 50).</param>
        </member>
        <member name="M:Phases.UmbracoUtils.YouTube.YouTubeHelpers.GetVideoFromId(System.String)">
            <summary>
            Gets information about a video with the specified.
            </summary>
            <param name="videoId">The ID of the video.</param>
        </member>
        <member name="M:Phases.UmbracoUtils.YouTube.YouTubeHelpers.GetVideoFromString(System.String)">
            <summary>
            Attempts to find a YouTube video ID the specified string and get
            information about that video.
            </summary>
            <param name="subject">The string to search.</param>
        </member>
        <member name="M:Phases.UmbracoUtils.YouTube.YouTubeHelpers.GetIdFromString(System.String)">
            <summary>
            Uses regular expressions for finding a YouTube video ID in the string.
            </summary>
            <param name="subject">The string to search.</param>
            <returns>The YouTube video ID if found, otherwise <var>NULL</var>.</returns>
        </member>
        <member name="M:Phases.UmbracoUtils.YouTube.YouTubeHelpers.GetIdFromString(System.String,System.String@)">
            <summary>
            Uses regular expressions for finding a YouTube video ID in the string.
            </summary>
            <param name="subject">The string to search.</param>
            <param name="videoId">The YouTube video ID if found, otherwise <var>NULL</var>.</param>
            <returns>Returns <var>TRUE</var> if a video ID is found, otherwise <var>FALSE</var>.</returns>
        </member>
        <member name="M:Phases.UmbracoUtils.YouTube.YouTubeHelpers.GetEmbedHtml(System.String,System.Int32,System.Int32)">
            <summary>
            Builds the HTML embed iframe for the specified video.
            </summary>
            <param name="videoId">The YouTube ID of the video.</param>
            <param name="width">The desired width of the iframe.</param>
            <param name="height">The desired height of the iframe.</param>
        </member>
        <member name="M:Phases.UmbracoUtils.YouTube.YouTubeHelpers.GetEmbedHtml(System.String,System.String,System.String)">
            <summary>
            Builds the HTML embed iframe for the specified video.
            </summary>
            <param name="videoId">The YouTube ID of the video.</param>
            <param name="width">The desired width of the iframe.</param>
            <param name="height">The desired height of the iframe.</param>
        </member>
        <member name="M:Phases.UmbracoUtils.YouTube.YouTubeHelpers.GetEmbedHtml(System.String,System.Int32,System.Int32,Phases.UmbracoUtils.YouTube.YoutubeVideoQuality)">
            <summary>
            Builds the HTML embed iframe for the specified video.
            </summary>
            <param name="videoId">The YouTube ID of the video.</param>
            <param name="width">The desired width of the iframe.</param>
            <param name="height">The desired height of the iframe.</param>
            <param name="videoQuality">Quality of the video</param>
            <returns></returns>
        </member>
        <member name="M:Phases.UmbracoUtils.YouTube.YouTubeHelpers.GetEmbedHtml(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Builds the HTML embed iframe for the specified video.
            </summary>
            <param name="videoId">The YouTube ID of the video.</param>
            <param name="width">The desired width of the iframe.</param>
            <param name="height">The desired height of the iframe.</param>
            <param name="showRelations">By the default, YouTube will show
            related videos at the end of videos. Setting this to
            <var>FALSE</var> will disable the feature.</param>
            <param name="wmode">The flash video player doesn't really
            play well with layers (mostly in IE). Setting this
            parameter to <var>transarent</var> will solve most
            of these issues.</param>
        </member>
        <member name="M:Phases.UmbracoUtils.YouTube.YouTubeHelpers.GetYouTubeThumbnail(System.String)">
            <summary>
            Gets the default thumbnail URL for a video with the specified ID. The default
            thumbnail measures 480x360 pixels.
            </summary>
            <param name="videoId">The ID of the video.</param>
            <returns>The thumbnail URL if the video ID is valid, otherwise <var>NULL</var>.</returns>
        </member>
        <member name="M:Phases.UmbracoUtils.YouTube.YouTubeHelpers.GetYouTubeThumbnail(System.String,System.Int32)">
            <summary>
            Gets the thumbnail URL for a video with the specified ID. The default thumbnail (index = 0)
            measures 480x360 pixels, while the others measures 120x90 pixels.
            </summary>
            <param name="videoId">The ID of the video.</param>
            <param name="index">The index of the thumbnail URL to return
            (valid range is from 0 to 3 - both inclusive).</param>
            <returns>The thumbnail URL if the video ID is valid, otherwise <var>NULL</var>.</returns>
        </member>
        <member name="M:Phases.UmbracoUtils.YouTube.YouTubeVideo.GetVideoId(System.Xml.Linq.XElement)">
            <summary>
            If the video is retrieved as part of a channel, it is described by
            an &lt;item&gt; element.If the video is retrieved directly, it is
            instead described by an &lt;entry&gt; element. This also affects
            how the URL (and ID) can be found.
            </summary>
            <param name="xElement"></param>
            <returns></returns>
        </member>
    </members>
</doc>
