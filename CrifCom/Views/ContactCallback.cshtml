@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@using System.Configuration
@using System.Text
@using CrifCom.Controllers;
@using CrifCom.Utils;
@{
	Layout = null;
    LinkedInController controller = new LinkedInController();
    var linkedInApiKey = ConfigurationManager.AppSettings["ClientIDForLinkedInRegister"];
    var linkedInSecretKey = ConfigurationManager.AppSettings["ClientSecretForLinkedInRegister"];
    int NodeId = int.Parse(Umbraco.GetDictionaryValue("ContactPageId"));
    int defaultPort = Request.IsSecureConnection ? 443 : 80;
    string url = Crifireland.Utils.Utility.GetDomainUrl(NodeId, defaultPort);
    var CallbackUrl = url + "/ContactCallback";
    Uri redirectUri = new Uri(CallbackUrl);
    var authorizationCode = Request["code"];
    var accessCodeUri =
        string.Format(
            "https://www.linkedin.com/oauth/v2/accessToken?grant_type=authorization_code&code={0}&redirect_uri={1}&client_id={2}&client_secret={3}",
            authorizationCode,
            redirectUri.AbsoluteUri,
            linkedInApiKey,
            linkedInSecretKey);

    WebRequest request =
        WebRequest.Create(accessCodeUri);
	if (System.Configuration.ConfigurationManager.AppSettings["proxyServerAddress"].ToString() != "" && System.Configuration.ConfigurationManager.AppSettings["proxyServerPort"].ToString() != "")
    {
        string strprxyaddr = System.Configuration.ConfigurationManager.AppSettings["proxyServerAddress"].ToString();
        string strprxyport = System.Configuration.ConfigurationManager.AppSettings["proxyServerPort"].ToString();
        WebProxy myproxy = new WebProxy("" + strprxyaddr + ":" + strprxyport + "", false);
		if (System.Configuration.ConfigurationManager.AppSettings["proxyServerUserName"].ToString() != "" && System.Configuration.ConfigurationManager.AppSettings["proxyServerPassword"].ToString() != "")
		{
			string strprxyuser = System.Configuration.ConfigurationManager.AppSettings["proxyServerUserName"].ToString();
			string strprxypass = System.Configuration.ConfigurationManager.AppSettings["proxyServerPassword"].ToString();
			ICredentials credentials = new NetworkCredential(strprxyuser, strprxypass);
			myproxy = new WebProxy("" + strprxyaddr + ":" + strprxyport + "", true, null, credentials);
		}
        request.Proxy = myproxy;
    }
    request.Method = "POST";
    request.ContentType = "application/x-www-form-urlencoded";
    request.Headers.Add("Access-Control-Allow-Origin", "*");
    Stream dataStream = request.GetRequestStream();

    string postData = string.Empty;
    byte[] postArray = Encoding.ASCII.GetBytes(postData);
    dataStream.Write(postArray, 0, postArray.Length);
    dataStream.Flush();
    dataStream.Close();

    WebResponse response = request.GetResponse();
    dataStream = response.GetResponseStream();
    var reader = new StreamReader(dataStream);
    string responseFromServer = reader.ReadToEnd();
    string returnResponse = controller.Share(responseFromServer);

    var data = controller.Deserialize<CrifCom.Utils.Person>(returnResponse);
    //TempData["Name"] = String.Empty;
    //TempData["SurName"] = String.Empty;
    //TempData["Email"] = String.Empty;
    //TempData["Company"] = String.Empty;
    //TempData["Role"] = String.Empty;
    //TempData["Country"] = String.Empty;
    if (!string.IsNullOrEmpty(data.FirstName))
    {
        TempData["Name"] = data.FirstName;
    }
    if (!string.IsNullOrEmpty(data.LastName))
    {
        TempData["SurName"] = data.LastName;
    }
    if (!string.IsNullOrEmpty(data.Email))
    {
        TempData["Email"] = data.Email;
    }
    if (data.Positions != null && data.Positions.Count() > 0)
    {
        if (!string.IsNullOrEmpty(data.Positions[0].company.Name))
        {
            TempData["Company"] = data.Positions[0].company.Name;
        }
        if (!string.IsNullOrEmpty(data.Positions[0].Title))
        {
            TempData["Role"] = data.Positions[0].Title;
        }
    }
    if (data.location != null && !string.IsNullOrEmpty(data.location.Name))
    {
        TempData["Country"] = data.location.Name;
    }

    reader.Close();
    dataStream.Close();
    response.Close();
    Response.Redirect(Umbraco.TypedContent(NodeId).Url);
}