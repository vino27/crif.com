@inherits Umbraco.Web.Macros.PartialViewMacroPage
@using Phases.UmbracoUtils
@using CrifCom.Models
@using Crifireland.Utils;
@using System.Configuration;
@{
    string emailId = "";
	var currentNode = Model.Content;
    ResetPassword ResetPassword = new ResetPassword();
    if (Request["id"] != null && !string.IsNullOrEmpty(Request["id"]))
    {
        var id = Request.QueryString["id"].ToString();
        emailId = Utility.Decrypt(HttpUtility.UrlDecode(id), ConfigurationManager.AppSettings["EncryptionPassPhrase"].ToString());
    }

    <div class="col-sm-12 forgot-pass-wrap">
      @using (Html.BeginUmbracoForm<CrifCom.Controllers.UserProfileController>("ResetPassword", null, new { id = "resetPasswordForm" }))
      {
        <div class="row row-offset-10">

            <div class="col-sm-4 form-group">

                @Html.PasswordFor(x => ResetPassword.PassWord, new
           {
               id = "passwordTxt",
               @class = "form-control",
               placeholder = currentNode.GetPropertyValue<string>("passwordPlaceHolder"),
               @data_val_required = currentNode.GetPropertyValue<string>("passwordRequiredMessage"),
               @data_val_regex = currentNode.GetPropertyValue<string>("minimumPasswordCharacterMessage"),
               data_val = "true"
           })
                @Html.ValidationMessageFor(x => ResetPassword.PassWord, null, new { @class = "errormessage" })
            </div>
            <div class="col-sm-4 form-group">

                @Html.PasswordFor(x => ResetPassword.ConfirmPassword, new
           {
               id = "confirmPasswordTxt",
               @class = "form-control",
               placeholder = currentNode.GetPropertyValue<string>("confirmPasswordPlaceholder"),
               @data_val_required = currentNode.GetPropertyValue<string>("confirmPasswordRequiredMessage"),
               @data_val_equalto = currentNode.GetPropertyValue<string>("passwordMismatchError"),
                   data_val = "true"
           }) 
                @Html.ValidationMessageFor(x => ResetPassword.ConfirmPassword, null, new { @class = "errormessage" })
            </div>
            <div class="col-sm-4 form-group">

                @Html.HiddenFor(x => ResetPassword.Email, new
           {
               Value = emailId,
               id = "emailTxt",
               @class = "form-control hidden",
               data_val = "true"
           })
               
            </div>

        </div>
        <div class="row row-offset-10">

            <div class="col-sm-12 ">
                <input type="submit" value="@currentNode.GetPropertyValue("submitButtonText")" class="btn-primary" />
            </div>
        </div>
      }
        <div id="ResetSuccessMessage" class="alert alert-success alert-dismissible fade in" role="alert">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            <strong>@currentNode.GetPropertyValue("resetSuccessMesage")</strong>
        </div>
        <div id="ResetFailMessage" class="alert alert-danger alert-dismissible fade in" role="alert">
            <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
            <strong>@currentNode.GetPropertyValue("resetFailMessage")</strong>
        </div>
        <div class="loader" id="loader">
            <img src="/images/default.gif" alt="loader">
        </div>
    </div>
}