@using umbraco.NodeFactory;
@using System.Net;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using Umbraco.Core.Logging;
@using System.Configuration;

@inherits Umbraco.Web.Macros.PartialViewMacroPage
@{

    try
    {
        using (var webClient = new System.Net.WebClient())
        {
            string clientId = ConfigurationManager.AppSettings["facebookClientId"];
            string clientSecret = ConfigurationManager.AppSettings["facebookClientSecret"];
            string redirectUri = ConfigurationManager.AppSettings["facebookRedirectUri"];
            string pageId = ConfigurationManager.AppSettings["facebookPageId"];

            int numberOfFeeds = 3;
            if (!int.TryParse(Model.MacroParameters["LimitsOfFeeds"].ToString(), out numberOfFeeds))
            {
                numberOfFeeds = 3;
            }

            
            string URL = string.Format("https://graph.facebook.com/oauth/access_token?client_id={0}&client_secret={1}&redirect_uri={2}&grant_type=client_credentials", clientId, clientSecret, redirectUri);
            
            var access_token = webClient.DownloadString(URL);

            <input type="text" value="@URL" style="display:none;" />

            URL = string.Format("https://graph.facebook.com/{0}/posts?{1}&limit={2}", pageId, access_token, numberOfFeeds);
            var json = webClient.DownloadString(URL);


            if (json != null)
            {
                JObject jObject = JObject.Parse(json);
                JArray data = (JArray)jObject["data"];


                if (data.Any())
                {
                    <div class="social_feed_block facebook_feed">
                        <div class="social_media_type">
                            <h4>
                                <span>
                                    <a href="@Model.Content.GetPropertyValue("facebookLink", true)" target="_blank"><img src="/img/social_fb_icon.png" alt="Facebook"></a>
                                </span><a href="@Model.Content.GetPropertyValue("facebookLink", true)" target="_blank">Facebook</a>
                            </h4>
                        </div>
                        <!--Activity blocks -->
                        <ul class="social_activity">
                            
                            @foreach (JObject obj in data)
                            {
                               

                                if (obj["message"] == null ||string.IsNullOrEmpty(obj["message"].ToString()))
                                {
                                    continue;
                                }
								
								var permaLink = string.Format("http://www.facebook.com/{0}", obj["id"]);
								
								var trailingString = string.Format("<a class=\"dots\" href=\"{0}\" target=\"_blank\">...</a>", permaLink);
																   
                                var message = TruncateAtWord(obj["message"].ToString(), 125, trailingString);

                                System.DateTime dtDateTime = DateTime.Parse(obj["created_time"].ToString());

                                <li>
                                    <h5>
                                        Dean Smith
										<a href="@permaLink" target="_blank">
                                        	<span class="date-span" data-date="@dtDateTime.Date.ToString("MM/dd/yyyy hh:mm:ss tt")"><span class="duration-text"></span>ago</span>
										</a>
                                    </h5>
                                    <p>@Html.Raw(message)</p>
                                </li>
                             
                            }
                          
                        </ul>
                    </div>
    
               
                }

            }

        }
    }
    catch (Exception ex)
    {
        LogHelper.Error(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType, "[GetTwitterFeeds]" + ex.Message, ex);

    }
   

}


@functions {

    public static string TruncateAtWord(string value, int length, string trailingString = "...")
    {
        if (value == null || value.Length < length)
            return value;
        int iNextSpace = value.LastIndexOf(" ", length);
        return string.Format("{0}" + trailingString, value.Substring(0, (iNextSpace > 0) ? iNextSpace : length).Trim());
    }

}


