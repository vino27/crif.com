@inherits Umbraco.Web.Macros.PartialViewMacroPage
@using CrifCom.Controllers
@using CrifCom.Models
@using Phases.UmbracoUtils
@using RJP.MultiUrlPicker.Models
@{
    var home = Model.Content.AncestorOrSelf(1);
    Login login = new Login();
    ForgotPassword forgotPassword = new ForgotPassword();
    var loginNode = home.Descendant("loginForm");
    var forgotPasswordNode = home.Descendant("forgotPasswordForm");
    <div class="modal fade flexible-modal" role="dialog" id="LoginModal">
        <div class="modal-dialog">
            <!-- Modal content login form-->
            <div class="modal-content small-layout">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <div class="login-form-wrapper">
                  
                    <div id="login-form-main-research">
                        <h3 class="clr-orange text-center">Login</h3>
                        @using (Html.BeginUmbracoForm<CrifCom.Controllers.RegistrationController>("Login", null, new { id = "loginFormResearch" }))
                        {
                            @Html.AntiForgeryToken()
                            Html.EnableClientValidation();
                            Html.EnableUnobtrusiveJavaScript();
                            <div class="form-group">

                                @Html.TextBoxFor(x => login.UserName, new
                           {
                               id = "userNameTxtResearch",
                               @class = "form-control",
                               placeholder = loginNode.GetPropertyValue("usernamePlaceholder"),
                               @data_val_required = forgotPasswordNode.GetPropertyValue<string>("usernameRequiredMessage"),
								   @data_val_regex = forgotPasswordNode.GetPropertyValue<string>("htmlNotAllowedErrorMessage"),
                               autocorrect = "off",
                               autocapitalize = "off",
                               Name = "Username"
                           })
                                @Html.ValidationMessageFor(x => login.UserName, null, new { @class = "errormessage", @data_valmsg_for = "Username" }) 
                            </div>
                            <div class="form-group">

                                @Html.PasswordFor(x => login.PassWord, new
                           {
                               id = "passwordTxthomeResearch",
                               @class = "form-control",
                               placeholder = loginNode.GetPropertyValue("passwordPlaceholder"),
                               @data_val_required = forgotPasswordNode.GetPropertyValue<string>("passwordRequiredMessage"),
								   @data_val_regex = forgotPasswordNode.GetPropertyValue<string>("htmlNotAllowedErrorMessage"),
                               autocorrect = "off",
                               Name = "Password"
                           }) 
                                @Html.ValidationMessageFor(x => login.PassWord, null, new { @class = "errormessage", @data_valmsg_for = "Password" })
                                
                            </div>
                            <div class="login-invalid" id="login-invalid">
                                <span>@loginNode.GetPropertyValue("invalidLoginText")</span>
                            </div>
                            <div class="button-wrapper">
                                @*<button class="submit btn btn-primary">@home.GetPropertyValue("loginButtonText")</button>*@
                                <input type="submit" value="@loginNode.GetPropertyValue("loginButtonText")" class="submit btn btn-primary" />
                            </div>
                        }
                        <p>
                            @if (home.HasValue("forgotPasswordText"))
                            {
                                <a id="forgot-password-research" href="" class="link">@home.GetPropertyValue("forgotPasswordText")</a>
                            }
                            else
                            {
                                <a id="forgot-password-research" href="" class="link">FORGOT PASSWORD</a>
                            }

                        </p>
                        <p>
                            @PrintRegisterButton(loginNode)

                        </p>
                        @*<div class="loader-sub-login" id="loader">
                            <img src="/images/default.gif" alt="loader">
                        </div>*@
                    </div>
                   
                    <div id="reset-password-research" style="display:none">
                        @using (Html.BeginUmbracoForm<CrifCom.Controllers.UserProfileController>("ForgotPassword", null, new { id = "forgotPasswordFormResearch" }))
                        {
                            <div class="form-group">
                                @Html.TextBoxFor(x => forgotPassword.Email, new
                           {
                               id = "emailLoginTxtResearch",
                               @class = "form-control",
                               placeholder = forgotPasswordNode.GetPropertyValue("emailPlaceHolder"),
                               @data_val_regex = forgotPasswordNode.GetPropertyValue<string>("emailValidationErrorMessage"),
                               @data_val_required = forgotPasswordNode.GetPropertyValue<string>("emailValidationMessage"),
                               autocorrect = "off",
                               autocapitalize = "off",
                               Name = "Email"
                           }) 
                                @Html.ValidationMessageFor(x => forgotPassword.Email, null, new { @class = "errormessage", @data_valmsg_for = "Email" })  
                            </div>
                            <div class="alert alert-success alert-dismissible fade in resetSuccessMessage" role="alert">

                                <strong>@forgotPasswordNode.GetPropertyValue("mailSentSuccessMessage")</strong>
                            </div>
                            <div class="alert alert-danger alert-dismissible fade in reset-failed-message" role="alert">

                                <strong>@forgotPasswordNode.GetPropertyValue("mailSentFailureMessage")</strong>
                            </div>
                            <div class="button-wrapper">
                                <input type="submit" value="@forgotPasswordNode.GetPropertyValue("resetPasswordText")" class="submit btn btn-primary" />

                            </div>
                        }
                        <p>
                            @PrintRegisterButton(loginNode)
                        </p>
                        @*<div class="loader-sub-password" id="loader">
                            <img src="/images/default.gif" alt="loader">
                        </div>*@
                    </div>
                     
                </div>
            </div>

            <!-- Modal content register form-->

        </div>
    </div>
}

@helper PrintRegisterButton(IPublishedContent home)
{
if (home.HasValue("registrationFormUrl"))
{
    var registrationUrl = home.GetPropertyValue<MultiUrls>("registrationFormUrl");
    if (registrationUrl != null && registrationUrl.Any())
    {
            <a href="@registrationUrl.FirstOrDefault().Url" target="@registrationUrl.FirstOrDefault().Target" class="link">@registrationUrl.FirstOrDefault().Name</a>
    }
}

}