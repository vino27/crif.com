@inherits Umbraco.Web.Macros.PartialViewMacroPage
@using CrifCom.Models
@{
	var currentNode = Model.Content;
    if (Umbraco.MemberIsLoggedOn())
    {
        <h2 class="clr-orange">@Umbraco.Field("passwordChangeTitle")</h2>
        string currentMemberEmail = Umbraco.MembershipHelper.CurrentUserName;
        ResetPassword existingMember = new ResetPassword();
        existingMember = existingMember.GetUserByEmail(currentMemberEmail);
        if (existingMember != null)
        {
            using (Html.BeginUmbracoForm<CrifCom.Controllers.UserProfileController>("ChangePassword", null, new { id = "change-password" }))
            {
                @Html.HiddenFor(x => existingMember.Email, new
                                                               {
                                                                   Name = "Email"
                                                               })                       
                <div class="row row-offset-10">
                    <div class="col-sm-4 form-group">
                        @Html.PasswordFor(x => existingMember.PassWord, new
                                                                        {
                                                                            id = "passwordTxt",
                                                                            @class = "form-control",
                                                                            placeholder = currentNode.GetPropertyValue<string>("passwordPlaceholder"),
                                                                            @data_val_required = currentNode.GetPropertyValue<string>("passwordFieldRequired"),
                                                                            data_val = "true",
                                                                            Name= "PassWord"
                                                                        })
                        @Html.ValidationMessageFor(x => existingMember.PassWord, null, new { @class = "errormessage", @data_valmsg_for = "PassWord"  })
                    </div>
                    <div class="col-sm-4 form-group">

                        @Html.PasswordFor(x => existingMember.ConfirmPassword, new
                                                                                  {
                                                                                      id = "conformTxt",
                                                                                      @class = "form-control",
                                                                                      placeholder = currentNode.GetPropertyValue<string>("confirmPasswordPlaceholder"),
                                                                                      @data_val_required = currentNode.GetPropertyValue<string>("confirmPasswordFieldRequired"),
                                                                                      @data_val_equalto = currentNode.GetPropertyValue<string>("passwordMismatchErrorMessage"),
                                                                                      data_val = "true",
                                                                                      Name = "ConfirmPassword"
                                                                                  })
                        @Html.ValidationMessageFor(x => existingMember.ConfirmPassword, null, new { @class = "errormessage", @data_valmsg_for = "ConfirmPassword"  })
                    </div>
                </div>
                <div class="row row-offset-10">

                    <div class="col-sm-12 ">
                        <input type="submit" value="@Model.Content.GetPropertyValue("changePasswordButtonText")" class="btn-primary" />
                    </div>
                </div>
                <div id="alert-reset-password-success" class="alert alert-success alert-dismissible fade in" role="alert">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <strong>@currentNode.GetPropertyValue("passwordResetSuccessMessage")</strong>
                </div>
                <div id="alert-reste-password-failure" class="alert alert-danger alert-dismissible fade in" role="alert">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <strong>@currentNode.GetPropertyValue("passwordResetFailureMessage")</strong>
                </div>
            }
        }
    }
}
